<launch>
  <arg name="simul" default="true"/>
  <arg name="initial_pose_x" default="0.0"/>
  <arg name="initial_pose_y" default="0.0"/>
  <arg name="initial_pose_a" default="0.0"/>
  <arg name="dynamic_map" default="false"/>
  <arg name="clean_goal_map" default="false"/>
  <arg name="clean_unexplored_map" default="false"/>
  <arg name="look_at_goal" default="false"/>
  <arg name="avoidance_type_obstacle" default="false"/>
  <arg name="kinect_minX" default="0.25"/>
  <arg name="kinect_maxX" default="0.9"/>
  <arg name="kinect_minY" default="-0.35"/>
  <arg name="kinect_maxY" default="0.35"/>
  <arg name="kinect_minZ" default="0.05"/>
  <arg name="kinect_maxZ" default="1.0"/>
  <arg name="calculate_diagonal_paths" default="false"/>
  <arg name="hostname" default="192.168.0.11" />
  <arg name="tf_prefix" default="no_prefix"/>
  <arg name="use_tf_prefix" default="false" />
  
  <param name="robot_description" textfile="$(find robotino_description)/urdf/robotino.urdf" />
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
    <param name="publish_frequency" type="double" value="20.0" />
    <param name="tf_prefix" value="$(arg tf_prefix)" if="$(arg use_tf_prefix)"/>
  </node>
  <node pkg="tf" type="static_transform_publisher" name="laser_camera_broadcaster"
        args="0.0 0 0.0 0 0 0 laser_link camera_depth_frame 50" unless="$(arg use_tf_prefix)" />
  <node pkg="tf" type="static_transform_publisher" name="laser_camera_broadcaster"
        args="0.0 0 0.0 0 0 0 $(arg tf_prefix)/laser_link $(arg tf_prefix)/camera_depth_frame 50" if="$(arg use_tf_prefix)" />
  <node pkg="tf" type="static_transform_publisher" name="base_laser_broadcaster_from_launch_file"
        args="0.13 0 0.05 0 0 0 base_link laser_link 100" unless="$(arg use_tf_prefix)"/>
  <node pkg="tf" type="static_transform_publisher" name="base_laser_broadcaster_from_launch_file"
        args="0.13 0 0.05 0 0 0 $(arg tf_prefix)/base_link $(arg tf_prefix)/laser_link 100" if="$(arg use_tf_prefix)"/>
  <node pkg="tf" type="static_transform_publisher" name="tf_wheel0" args="0 0 0 0 0 0 base_link wheel0_link 50"/>
  <node pkg="tf" type="static_transform_publisher" name="tf_wheel1" args="0 0 0 0 0 0 base_link wheel1_link 50"/>
  <node pkg="tf" type="static_transform_publisher" name="tf_wheel2" args="0 0 0 0 0 0 base_link wheel2_link 50"/>
  
  <group ns="hardware">
    <node name="mobile_base" pkg="mobile_base" type="omni_base.py" output="screen">
      <param name="simul" value="true"/>
      <param name="port1" value="/dev/justinaRC30"/>
      <param name="port2" value="/dev/justinaRC15"/>
    </node>
    <node name="laser_manager" pkg="laser_manager" type="laser_manager_node" output="screen">
      <param name="simul" value="true"/>
      <!-- param name="bag" value="$(find laser_manager)/bags/example.bag"/ -->
      <param name="dynamic_map" value="false"/>
    </node>
    <node name="head" pkg="head" type="head_sdk" output="screen">
    </node> 
    <node name="kinect_man" pkg="kinect_man" type="kinect_man_node" output="screen"
          args="--downsample_by 3 --bag $(find kinect_man)/videos/example.bag"/>
    <node name="joy" pkg="joy" type="joy_node" output="screen"/>
  </group>

  
  <group ns="hri">
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find knowledge)/hri/rviz_festina.rviz"/>
    <node name="festina_gui" pkg="festina_gui" type="festina_gui_node" output="screen"/>
    <node name="leg_finder" pkg="leg_finder" type="leg_finder_node" args="--hyp" output="screen"/>
    <node name="human_follower" pkg="human_follower" type="human_follower_node" args="--move_head" output="screen"/>
  </group>

  
  <group ns="interoperation">
    <node name="bbros_bridge" pkg="bbros_bridge" type="bbros_bridge_all.py"
          args="-f $(find bbros_bridge)/src/files/topics_inclusion_list.json"/>
    <node name="joystick_teleop" pkg="joystick_teleop" type="joystick_teleop_node.py" output="screen" />
  </group>
  
  <include file="$(find surge_et_ambula)/launch/justina_navigation.launch">
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
    <arg name="dynamic_map" value="$(arg dynamic_map)"/>
    <arg name="clean_goal_map" value="$(arg clean_goal_map)"/>
    <arg name="clean_unexplored_map" value="$(arg clean_unexplored_map)"/>
    <arg name="look_at_goal" value="$(arg look_at_goal)"/>
    <arg name="avoidance_type_obstacle" value="$(arg avoidance_type_obstacle)"/>
    <arg name="kinect_minX" value="$(arg kinect_minX)"/>
    <arg name="kinect_maxX" value="$(arg kinect_maxX)"/>
    <arg name="kinect_minY" value="$(arg kinect_minY)"/>
    <arg name="kinect_maxY" value="$(arg kinect_maxY)"/>
    <arg name="kinect_minZ" value="$(arg kinect_minZ)"/>
    <arg name="kinect_maxZ" value="$(arg kinect_maxZ)"/>
    <arg name="calculate_diagonal_paths" value="$(arg calculate_diagonal_paths)"/>
  </include>
  
  <group ns="vision">
    <node name="face_recog" pkg="face_recog" type="face_recog_node" output="screen"/>
    <node name="obj_reco" pkg="obj_reco" type="obj_reco_node" output="screen" args="--db $(find obj_reco)/TrainingDir/"/>
    <node name="hand_detect_in_BB" pkg="hand_recog" type="hand_detect_in_BB_node" output="screen"/>
    <node name="cube_segmentation" pkg="cubes_segmentation" type="cubes_segmentation_node" output="screen"/>
    <!-- This is for load the open pose node  -->
    <!-- node name="openpose_node" pkg="openpose" type="open_pose_node" output="screen">
   <param name="debug_mode" value="false"/>
   <param name="file_links_config" value="$(find openpose)/OpenPoseConfig.xml"/>
   <param name="model_folder" value="$(env OPENPOSE_HOME)/models/"/ -->
    <!-- This Value is to the old openpose version 1.2 -->
    <!-- param name="net_resolution" value="480x320"/ -->
    <!-- param name="net_resolution" value="256x192"/>
   <param name="model_pose" value="BODY_25"/>
   <remap from="/vision/openpose/enable_estimate_pose" to="/vision/skeleton_finder/enable_tracking"/>
   </node -->
    <node name="gesture_recog_skeleton" pkg="gesture_recog_skeleton" type="gesture_recog_node" output="screen">
      <param name="gesture_method" value="1"/>
      <!-- This params are to waving detect -->
      <param name="num_frames" value="10"/>
      <param name="thr_waving_motion" value="0.3"/>
      <param name="thr_to_person" value="0.3"/>
      <param name="time_elapsed_remove" value="10.0"/>
    </node>
  </group>
  <include file="$(find surge_et_ambula)/launch/justina_knowledge.launch"/>
  <!-- This is for the roah IROS refere -->
  <!-- include file="$(find roah_rsbb_comm_ros)/launch/test.launch"/>
       <node name="monitor" pkg="act_pln" type="monitor" output="screen"/-->
</launch>